class Math{
protected float MINVALUE = 1.4E-45f;
protected float MAXVALUE = 3.4028234663852886E38f;
protected float pi = 3.1415926536f;
protected float PiS2 = 1.5707963267949f;
 float _ulp(float x) {
    int ex = 0;
    float MAXVALUE = 3.4028234663852886E38f;
    float MINVALUE = 1.4E-45f;
	if(x<=0.0){
		x = -x;
	}
    if (x == 0.0 || x == -0.0){
				 return MINVALUE;}
    else {
    if (x == MAXVALUE|| x == MINVALUE) {
			return _pow(2,104);
        }
    else{if(x>1.0){
         ex = ex-1;
         while(x>=1.0){
             x = x/2;
             ex = ex + 1;
             }
    return _pow(2,ex-23);
    }
        else{
        while(x<1.0){
        x = x*2.0;
        ex = ex -1;
        }
        return _pow(2,ex-23);
        }
    }
      }
}

float _cos(float x){
  x = _fmod(x,2*pi);
  if((0<=x && x<=1.652f)) {
    return _cosTaylor(x);
  }
  else if(1.652<=x && x<4.5){
    return  _sinTaylor(pi/2-x);
  }
  else {
    return  -_cosTaylor(pi-x);
  }
}


float _cosTaylor(float f){
    float res = 1;
    int i = 2;
    float j =i;
    int k = 0;
    float x = -_pow(f,2)/j;
    println(x);
    while(k<1){
    k=k + 1;
    res = res + x;
    j=(float)((i+1)*(i+2));
    x=-x*_pow(f,2)/j;
    i = i + 2;
    }
    return res;
    }




float _pow(float x, int n){
  float ex = x;
  if (x == 0) {
        return 0;
        }
  if (n == 0){
        return 1;
        }
  else {if(n>0){
  while ( n>1) {
  x = x*ex ;
  n = n - 1;
    }
  return x ;
  }
  else{
  x = _pow(ex, -n) ;
  return 1/x ;
    }
  }
}




float _fmod(float a, float b) {
        return a - b * (int)(a/b);
    }


float _sin(float x){
  x = _fmod(x,2*pi);
  if((0<=x && x<0.7853981633974483f)) {
    return _sinTaylor(x);
  }
  else if(0.7853981633974483f<=x && x<PiS2){
    return  _cos(PiS2-x);
  }
  else if(PiS2<=x && x<2.356194490192345f){
    return  -_cos(PiS2+x);
  }
  else if(2.356194490192345f<=x && x<pi){
    return  _sinTaylor(pi-x);
  }
  else if(pi<=x && x<3.9269908169872414f){
    return  _cos(x-pi/2);
  }
  else if(3.9269908169872414f<=x && x<5.497787143782138f){
    return  -_sinTaylor(x-pi);
  }
  else {
    return  -_cos(x+PiS2);
  }
}



float _sinTaylor(float x) {
    int i = 1;
    float sum;
    float factor;
    if (x == 0) {
        return 0;
    }
    factor = x;
    sum = x;
    int k =0;
    while (k<=100) {
      k = k+1;
        factor = -factor * x * x / (2*i * (2*i+1));
        sum = sum + factor;
        i = i + 1;
    }
    return sum;
}







float atanHermite(float x){
float ret;
ret =1.1097301E-6*_pow(f,55)
-3.1647858E-5*_pow(f,54)
+4.3415572E-4*_pow(f,53)
-0.0038123499*_pow(f,52)
+0.024052639*_pow(f,51)
-0.11600586*_pow(f,50)
+0.44423878*_pow(f,49)
-1.3847452*_pow(f,48)
+3.5731058*_pow(f,47)
-7.719477*_pow(f,46)
+14.067447*_pow(f,45)
-21.717817*_pow(f,44)
+28.45957*_pow(f,43)
-31.659622*_pow(f,42)
+29.87223*_pow(f,41)
-23.889599*_pow(f,40)
+16.206028*_pow(f,39)
-9.34463*_pow(f,38)
+4.565837*_pow(f,37)
-1.8463271*_pow(f,36)
+0.59336287*_pow(f,35)
-0.17059685*_pow(f,34)
+0.06747529*_pow(f,33)
-0.0061950684*_pow(f,32)
-0.0315158*_pow(f,31)
-5.6966146E-5*_pow(f,30)
+0.034484863*_pow(f,29)
-0.037037037*_pow(f,27)
+0.04*_pow(f,25)
-0.04347826*_pow(f,23)
+0.04761905*_pow(f,21)
-0.05263158*_pow(f,12)
+0.05882353*_pow(f,17)
-0.06666667*_pow(f,15)
+0.07692308*_pow(f,13)
-0.09090909*_pow(f,11)
+0.11111111*_pow(f,9)
-0.14285715*_pow(f,7)
+0.2*_pow(f,5)
-0.33333334*_pow(f,3)
return ret;
}



float _atan(float x){
int s = 1;
if (x<0){ signe = -1; }
if (x>1.1875){ return s*(PiS2-atanHermite(1/x)); }
else{ if (x>0.6875f){ return (((float)signe)*((float) (atanHermite((x -1)/(1+x)) + 0.7853982))); }else { return signe*atanHermite(x); }
}}



float asinTaylor(float x){
float res = x;
float prov = x;
int k = 1;
while (k < 1000000){
prov = prov * x * x * k / ((k+1)*(2*k+1));
res +=prov;
k=k+1;
}
return res;
}


float asinse(float x){
int n=35;
int N=n-1;
boolean bool= true;
float res=fact(n-1)/(_pow(2,n-1)*fact((n-1)/2)*fact((n-1)/2)*(n));
while ( N>=0){
     if (bool==true){
        res=res*x;
        bool=false;
        }
    else {
    res=res*x+fact(N-1)/(_pow(2,N-1)*fact((N-1)/2)*fact((N-1)/2)*(N));
    bool=true;
    }
    N=N-1;
    }
    return res;
}


public  float _asin(float x){
  if(_abs(x)>1){
    println("ArgumentError");
    return 0;
  }
  if(_abs(x)<=0.72){
    return asinTaylor(x);
  }
  else if(x>0.72){
    return pi/2-asinTaylor((float)_sqrt(1-_pow(x,2)));
  }
  else{
    return asinTaylor((float)_sqrt(1-_pow(x,2)))-pi/2;
  }
}

}
