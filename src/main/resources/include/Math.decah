class Math{
      //protected float pi = 3.1415926536f;
      //protected float PiS2 = 1.5707963267949f;
      //protected float posInf = Float.POSITIVE_INFINITY;
      //protected float negInf = Float.NEGATIVE_INFINITY;
      //protected float MAXVALUE = 3.4028234663852886E38f;
      //protected float MINVALUE = 1.4E-45f;
      //protected float NaN = 0.0f/0.0f;
      //protected float FPREC = 0.000001f;




float _min(float a ,float b){
  if (a<b){ return a;}
  else { return b;}
}


float _max(float a ,float b){
  if (a > b){ return a;}
  else { return b;}
}

float _fact(int n){
  if ( n==1 || n==0){ return 1;}
  else { return n*_fact(n-1);}
}


float _cosTaylor(float f){
  float res = 1;
  float r = 0.1f;
  float s = 1;
  int i = 2;
  float x = -_pow(f,2)/i;
  float y = 1;
  int k = 0;
  while (k<100){
    k++;
    res +=x;
    y=x;
    x*=-1*_pow(f,2)/((i+1)*(i+2));
    s = _abs((y-x));
    i+=2;

  }
  return res;

}


float _Modulo2Pi(float x,float y){
  return x - y*(int)(x/y);
}

float _abs(float a){
  if (a<0){ a = -a;}
  return a;
}


int _signe(float z){
  int s;
  if (z>0) { s=1;}
  else { s = -1;}
  return s;
}

float _Modulo2Pi(float x ,float y){
  return x - y * (int)(x/y);
}


float _cos(float x){
  x = _Modulo2Pi(x, 2*pi);
  if ((0<=x && x<pi) ||(x<=0 && x>=-pi/4)) {return _cosTaylor(x);}
  else if (pi<=x && x<3*pi/2){ return 0;}
  else {return 0;}
}

float asin1(float x){
  float res = x;
  float prov = x;
  int k = 1;
  while (k < 1000000){
    prov = prov * x * x * k / ((k+1)*(2*k+1));
    res +=prov;
    k++;
  }
  return res;
}

float asinse(float x){
  int n=35;
  int N=n-1;
  boolean bool= true;
  float res=fact(n-1)/(_pow(2,n-1)*fact((n-1)/2)*fact((n-1)/2)*(n));
  while ( N>=0){
    if (bool==true){
      res=res*x;
      bool=false;
    }
    else {
      res=res*x+fact(N-1)/(_pow(2,N-1)*fact((N-1)/2)*fact((N-1)/2)*(N));
      bool=true;
    }
    N=N-1;
  }
  return res;

}

float atanHermite(float x){
	float tab[]= {1.1097301E-6f,-3.1647858E-5f, 4.3415572E-4f, -0.0038123499f,
	0.024052639f, -0.11600586f, 0.44423878f, -1.3847452f, 3.5731058f, -7.719477f,
	14.067447f, -21.717817f, 28.45957f, -31.659622f, 29.87223f,-23.889599f,16.206028f,
	-9.34463f ,4.565837f,-1.8463271f,0.59336287f,-0.17059685f,0.06747529f,-0.0061950684f,
	-0.0315158f,-5.6966146E-5f,0.034484863f,-0.037037037f,0.04f,-0.04347826f,0.04761905f,
	-0.05263158f,0.05882353f,-0.06666667f,0.07692308f,-0.09090909f,0.11111111f,-0.14285715f,
	0.2f,-0.33333334f};
	int index[]={55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,
    30,29,27,25,23,21,19,17,15,13,11,9,7,5,3};
	float resu =0;
	for(int i=39;i>=0;i--){ resu += _pow(x,index[i])*tab[i]; }
	resu +=x;
	return resu;
}



float _atan(float x){
  int signe = 1;
  if (x<0){ signe = -1; }
  if (x>1.1875){ return signe*(pi/2-atanHermite(1/x)); }
  else if (x>0.6875f){ return (((float)signe)*((float) (atanHermite((x -1)/(1+x)) + pi/4.0))); }
  else { return signe*atanHermite(x); }
}



float _pow(float x, int n){
  float ex = x;
  if (x == 0) {
        return 0;
        }
  if (n == 0){
        return 1;
        }
  else if(n>0){
  while ( n>1) {
  x = x*ex ;
  n = n - 1;
  }
  return x ;
  }
  else{
  x = _pow(ex, -n) ;
  return 1/x ;
  }
  }

float _ulp(float x) {
 int ex = 0;
 if(x<=0){
   x = -x;
 }
 if (x == posInf || x == negInf){
    return x;}
 else if (x == NaN) {
    return NaN;
      }
   else if (x == 0.0 || x == -0.0) {
    return MINVALUE;
      }
 else if (x == MAXVALUE) {
    return _pow(2, 104);
      }
 else if ( x >= 1 ) {
     ex-- ;
     while (x >= 1 ) {
       x =  x/(float)2.0;
       ex ++ ;
     }
     return _pow(2,ex - 23);
   }
 else{
   while ( x < 1) {
     x = x*(float)2.0;
     ex -- ;
   }
   return _pow(2,ex - 23);
 }
}
}
